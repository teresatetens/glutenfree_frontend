import React, { useEffect, useState, useRef, useCallback } from "react";
import { GoogleMap,  useLoadScript,  Marker,  InfoWindow } from "@react-google-maps/api";
import axios from "axios";
import "@reach/combobox/styles.css";
import mapStyles from "./mapStyles";
import Locate from './Locate'
import Search from './Search'

const libraries = ["places"];

const mapContainerStyle = {
  height: "100vh",
  width: "100vw",
};
//Snazzy Blue Essence
const options = {
  styles: mapStyles,
  disableDefaultUI: true,
  zoomControl: true,
};

const Map = () => {
  const { isLoaded, loadError } = useLoadScript({
    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,
    libraries,
  });
  
  const apiKey = process.env.REACT_APP_IPIFY_API_KEY
  const myIpUrl = `https://geo.ipify.org/api/v1?apiKey=${apiKey}`

  const [center, setCenter] = useState({
      lat: 38.909707628426034,
      lng: -77.05981684253995
  });  

  // const [center, setCenter] = useState(null);
  console.log({center: center})
  
  const [centerError, setCenterError] = useState(false);

  const [radius, setRadius] = useState(30000);
  const [type, setType] = useState('restaurant');
  const [keyword, setKeyword] = useState('gluten');

  const [myPlaces, setMyPlaces] = useState(null);  
  const [selected, setSelected] = useState(null); 

  console.log({myPlaces: myPlaces})
  console.log({selected: selected})
  //const myIcon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/library_maps.png"
  const glutenFreeQuery = `json?location=${center.lat},${center.lng}&radius=${radius}&sensor=true&types=${type}&keyword=${keyword}&key=${process.env.REACT_APP_GOOGLE_MAPS_API_KEY}`
  //  "proxy": "https://maps.googleapis.com/maps/api/place/nearbysearch/", 
  
  const handleCenterError = () => {
      setCenterError(true);
      setCenter({
        // default washington location
        lat: 38.909707628426034,
        lng: -77.05981684253995
      })
  }

  // set user current position to Map Center
  useEffect(() => {
      if (!navigator.geolocation) {
        handleCenterError();
      } else {
        navigator.geolocation.getCurrentPosition(
          position => 
            setCenter({
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            }),
          async () => {
              try {
                const {data: { location : { lat, lng }} } = await axios.get(myIpUrl);   
                setCenter({
                  lat, lng
                })
              }
              catch (e) {
                handleCenterError()
              }
          }        
        );
      }
    }, []);

  // Fetch glutenfree restaurant from Google Places API  
  // data.results is an Array of 20 objects
  useEffect(() => {
      fetch(glutenFreeQuery)
      .then((response) => response.json())
      .catch(error=> console.error('Error:', error))
      .then(data => {
        setMyPlaces(data.results)
      })
  },[center])

//accessing inside the code does not cause rerendering
//useState makes render, useRef retain the state from rerendering
  const mapRef = useRef();
  const onMapLoad = useCallback((map) => {
    mapRef.current = map;
  }, []);

  const panTo = useCallback(({ lat, lng }) => {
    mapRef.current.panTo({ lat, lng });
    mapRef.current.setZoom(12);
  }, []);

  if (loadError) return "Error";
  if (!isLoaded) return "Loading...";

  return (
    <div>
      <div>
        <h1>
          Gluten Free Finder{" "}
          <span role="img" aria-label="check">
            ðŸ”Ž
          </span>
        </h1>
      </div>

      <Locate panTo={panTo} onCenter={setCenter}/> 
      <Search panTo={panTo} onCenter={setCenter} />

      <GoogleMap
        id="map"
        mapContainerStyle={mapContainerStyle}
        zoom={12}
        center={center}
        options={options}
        onLoad={onMapLoad}
        >
        { myPlaces && 
          myPlaces.map((myPlace)=>
          <Marker 
            key = {myPlace.place_id} 
            position = {{ lat: myPlace.geometry.location.lat, lng: myPlace.geometry.location.lng }} 
            // icon = {myIcon}
            onClick ={()=> setSelected(myPlace)}
          />
          )}

        { selected ? (
          <InfoWindow
            position={{ lat: selected.geometry.location.lat, lng: selected.geometry.location.lng }}
            onCloseClick={() => {
              setSelected(null);
            }}
          >
            <div>
              <h2>{selected.name}</h2>
              <p> Address: {selected.vicinity}</p>
              <p> Rating: {selected.rating}</p>
              <button value={selected.place_id}> Add to Watchlist</button>
              {/* <button value={selected.place_id}> Write a review</button> */}
              {/* {selected.photos[0].html_attributions[0]} */}
            </div>
          </InfoWindow>
        ) :  null }
      </GoogleMap>

    </div>
  );
}

export default Map
//// Version of Dec 3rd